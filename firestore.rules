rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isValidAmount(amount) {
      return amount is number && amount >= 0;
    }

    function isValidDate(dateField) {
      return dateField is timestamp || 
             (dateField is string && dateField.matches('^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}'));
    }

    // User profiles
    match /users/{userId} {
      // Allow read if user owns the document
      allow read: if isOwner(userId);
      
      // Allow create for initial signup
      allow create: if isSignedIn() && 
                   request.auth.uid == userId &&
                   request.resource.data.keys().hasAll(['id', 'fullName', 'email']) &&
                   request.resource.data.id == userId;
      
      // Allow updates if user owns the document and update is valid
      allow update: if isOwner(userId) &&
                   (!('id' in request.resource.data) || request.resource.data.id == userId) &&
                   (!('email' in request.resource.data) || request.resource.data.email == resource.data.email);
      
      // Allow delete if user owns the document
      allow delete: if isOwner(userId);

      // Nested collections (transactions, categories, etc.)
      match /{collection}/{document} {
        allow read, write: if isOwner(userId);
      }
    }

    // Bills collection
    match /bills/{billId} {
      allow read: if isSignedIn() && resource.data.userId == request.auth.uid;
      allow create: if isSignedIn() && 
                   request.resource.data.userId == request.auth.uid &&
                   isValidBill();
      allow update: if isSignedIn() && 
                   resource.data.userId == request.auth.uid &&
                   isValidBillUpdate();
      allow delete: if isSignedIn() && resource.data.userId == request.auth.uid;

      // Bill payments subcollection
      match /payments/{paymentId} {
        allow read: if isSignedIn() && get(/databases/$(database)/documents/bills/$(billId)).data.userId == request.auth.uid;
        allow write: if isSignedIn() && get(/databases/$(database)/documents/bills/$(billId)).data.userId == request.auth.uid;
      }
    }

    // Bill Categories collection
    match /billCategories/{categoryId} {
      allow read: if isSignedIn();
      allow write: if false; // Only admins can modify categories
    }

    // Bill Reminders collection
    match /billReminders/{reminderId} {
      allow read: if isSignedIn() && resource.data.userId == request.auth.uid;
      allow write: if isSignedIn() && request.resource.data.userId == request.auth.uid;
    }

    // Transactions collection
    match /transactions/{transactionId} {
      allow read: if isSignedIn() && resource.data.userId == request.auth.uid;
      allow create: if isSignedIn() && 
                   request.resource.data.userId == request.auth.uid;
      allow update, delete: if isSignedIn() && resource.data.userId == request.auth.uid;
    }

    // Savings goals collection rules
    match /savings_goals/{goalId} {
      allow read: if isSignedIn() && resource.data.userId == request.auth.uid;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if isSignedIn() && resource.data.userId == request.auth.uid;
    }

    // Bank accounts
    match /bank_accounts/{accountId} {
      allow read: if isSignedIn() && resource.data.userId == request.auth.uid;
      allow create: if isSignedIn() && 
                   request.resource.data.userId == request.auth.uid &&
                   isValidBankAccount();
      allow update, delete: if isSignedIn() && resource.data.userId == request.auth.uid;
    }

    // Loans
    match /loans/{loanId} {
      allow read: if isSignedIn() && 
                 request.auth.uid == resource.data.userId;
      allow create: if isSignedIn() && 
                   request.auth.uid == request.resource.data.userId;
      allow update: if isSignedIn() && 
                   request.auth.uid == resource.data.userId;
    }

    // Savings accounts
    match /savings_accounts/{accountId} {
      allow read: if isSignedIn() && 
                 request.auth.uid == resource.data.userId;
      allow create: if isSignedIn() && 
                   request.auth.uid == request.resource.data.userId;
      allow update: if isSignedIn() && 
                   request.auth.uid == resource.data.userId;
    }

    // Validation functions
    function isValidBill() {
      let data = request.resource.data;
      return data.keys().hasAll(['title', 'amount', 'userId', 'category', 'dueDate']) &&
             data.title is string && data.title.size() > 0 &&
             data.amount is number && data.amount >= 0 &&
             data.userId == request.auth.uid &&
             data.category is string &&
             isValidDate(data.dueDate) &&
             (!('status' in data) || data.status in ['pending', 'paid', 'overdue']) &&
             (!('recurringType' in data) || data.recurringType in ['none', 'daily', 'weekly', 'monthly', 'yearly']);
    }

    function isValidBillUpdate() {
      let data = request.resource.data;
      return data.userId == resource.data.userId && 
             isValidBill();
    }

    function isValidTransaction() {
      let data = request.resource.data;
      return isValidAmount(data.amount) &&
             data.type in ['expense', 'income', 'transfer', 'deposit', 'withdrawal', 
                          'savingsDeposit', 'savingsWithdrawal', 'loanPayment', 
                          'loanDisbursement', 'billPayment', 'investment'] &&
             isValidDate(data.date) &&
             data.category is string &&
             (data.description == null || data.description is string) &&
             data.status in ['pending', 'completed', 'failed', 'cancelled', 'reversed'];
    }

    function isValidTransactionUpdate() {
      let data = request.resource.data;
      return data.userId == resource.data.userId && // Can't change owner
             isValidTransaction();
    }

    function isValidCategory() {
      let data = request.resource.data;
      return data.name is string && data.name.size() > 0 &&
             data.icon is string &&
             (data.budget == null || isValidAmount(data.budget));
    }

    function isValidSavingsGoal() {
      let data = request.resource.data;
      return data.name is string && data.name.size() > 0 &&
             isValidAmount(data.targetAmount) &&
             isValidDate(data.startDate) &&
             (data.maturityDate == null || isValidDate(data.maturityDate)) &&
             isValidAmount(data.interestRate);
    }

    function isValidLoan() {
      let data = request.resource.data;
      return isValidAmount(data.amount) &&
             isValidAmount(data.interestRate) &&
             data.termMonths is number && data.termMonths > 0 &&
             data.purpose is string && data.purpose.size() > 0;
    }

    function isValidBankAccount() {
      let data = request.resource.data;
      return data.bankName is string && data.bankName.size() > 0 &&
             data.accountNumber is string && 
             data.accountType is string &&
             isValidAmount(data.balance);
    }
  }
} 